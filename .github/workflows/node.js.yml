name: Node.js CI

on:
  push:
    branches: [ "main" ]

jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout the code
        uses: actions/checkout@v4

      # Step 2: Set up the correct Node.js version
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          # Using a Long-Term Support (LTS) version like 20 is more stable than a future version like 23
          node-version: '20.x'

      # Step 3: Run syntax check on frontend code
      - name: Frontend Compilation (Syntax Check)
        run: |
          cd client
          find . -name "*.js" -exec node --check {} +

      # Step 4: Run syntax check on backend code
      - name: Backend Compilation (Syntax Check)
        run: |
          cd api
          find . -name "*.js" -exec node --check {} +

  Gitleaks-scan:
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # The gitleaks-action itself performs the scan. 
      # You don't need a separate setup and run step.
      - name: Run Gitleaks Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          # This tells the action to fail the job if leaks are found
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # If you have a Gitleaks license
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Trivy-filescan:
    runs-on: ubuntu-latest
    needs: Gitleaks-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  sonar-frontend:
    runs-on: ubuntu-latest
    needs: Trivy-filescan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SonarQube Scan (client)
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: client      # ðŸ‘ˆ instead of working-directory
          args: >
            -Dsonar.projectKey=myorg_client
            -Dsonar.projectName=myorg_client
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**

  sonar-backend:
    runs-on: Agent-1
    needs: sonar-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SonarQube Scan (api)
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: api         # ðŸ‘ˆ instead of working-directory
          args: >
            -Dsonar.projectKey=myorg_api
            -Dsonar.projectName=myorg_api
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
