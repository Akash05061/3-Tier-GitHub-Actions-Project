name: Node.js CI

on:
  push:
    branches: [ "main" ]

jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout the code
        uses: actions/checkout@v4

      # Step 2: Set up the correct Node.js version
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          # Using a Long-Term Support (LTS) version like 20 is more stable
          node-version: '20.x'

      # Step 3: Run syntax check on frontend code
      - name: Frontend Compilation (Syntax Check)
        run: |
          cd client
          find . -name "*.js" -exec node --check {} +

      # Step 4: Run syntax check on backend code
      - name: Backend Compilation (Syntax Check)
        run: |
          cd api
          find . -name "*.js" -exec node --check {} +

  Gitleaks-scan:
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gitleaks Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          # This tells the action to fail the job if leaks are found
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # If you have a Gitleaks license
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Trivy-filescan:
    runs-on: ubuntu-latest
    needs: Gitleaks-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  sonar-frontend:
    runs-on: ubuntu-latest
    needs: Trivy-filescan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SonarQube Scan (client)
        uses: sonarsource/sonarqube-scan-action@master # Best practice: pin to a specific version like @v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: client
          args: >
            -Dsonar.projectKey=myorg_client
            -Dsonar.projectName=myorg_client
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**

  sonar-backend:
    runs-on: ubuntu-latest
    needs: sonar-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SonarQube Scan (api)
        uses: sonarsource/sonarqube-scan-action@master # Best practice: pin to a specific version like @v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: api
          args: >
            -Dsonar.projectKey=myorg_api
            -Dsonar.projectName=myorg_api
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**

  build_backend_docker_image_and_push:
    runs-on: ubuntu-latest
    needs: sonar-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./api  
          push: true
          tags: akash501/backend:latest
          file: ./api/Dockerfile

  build_frontend_docker_image_and_push:
    runs-on: ubuntu-latest
    needs: sonar-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./client
          push: true
          tags: akash501/frontend:latest
          file: ./client/Dockerfile

  trivy_image_scan:
    runs-on: ubuntu-latest
    needs: build_frontend_docker_image_and_push   # or whatever job built/pushed your image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy image scan for backend
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image               # ðŸ‘ˆ scan container image
          image-ref: akash501/backend:latest
          format: table
          exit-code: '0'                 
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH
          
      - name: Run Trivy image scan for frontend
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image               # ðŸ‘ˆ scan container image
          image-ref: akash501/frontend:latest
          format: table
          exit-code: '0'              
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH
